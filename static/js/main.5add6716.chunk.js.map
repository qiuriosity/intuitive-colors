{"version":3,"sources":["ColorStation.js","ColorCard.js","Swatch.js","FullPalette.js","App.js","reportWebVitals.js","index.js"],"names":["ColorCard","props","handleChange","color","setState","background","hex","handleChangeComplete","updatePalette","id","state","this","onChange","onChangeComplete","disableAlpha","React","Component","Swatch","OverlayTrigger","placement","trigger","overlay","Tooltip","className","style","backgroundColor","numCards","colors","i","ColorStation","toggleDisplay","showPalette","bind","addCard","removeCard","setPalette","cards","swatches","push","CSSTransition","classNames","in","unmountOnExit","appear","timeout","onClick","Button","variant","as","Link","to","modCalc","a","b","shade","light","hexToHSL","H","r","g","length","cmin","Math","min","cmax","max","delta","h","l","round","s","abs","toFixed","HSLToHex","c","x","m","toString","computeShade","hsl","lighting","magnitude","newHSL","hue","saturation","value","huePosition","shadeDiff","satDiff","valDiff","generateShades","numShades","shades","floor","intensifyColor","factor","intensifyPalette","palette","newPalette","key","FullPalette","addShades","prevState","removeShades","intensify","base","deintensify","e","target","collection","Form","Group","controlId","Control","type","custom","step","App","prevPalette","JSON","parse","localStorage","getItem","setItem","stringify","console","log","basename","Navbar","bg","fixed","Brand","Nav","href","Text","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5add6716.chunk.js","sourcesContent":["import React from 'react';\nimport ColorCard from './ColorCard';\nimport Swatch from './Swatch';\nimport Button from 'react-bootstrap/Button';\nimport { Transition, CSSTransition } from 'react-transition-group';\nimport { PlusCircle, DashCircle } from 'react-bootstrap-icons';\nimport { Link } from \"react-router-dom\";\n\n/* help w/CSSTransition:\nhttps://blog.logrocket.com/improve-your-ui-with-react-transition-group-999fa35f7cae/\nhttp://reactcommunity.org/react-transition-group/transition\nhttps://blog.bitsrc.io/animating-reactjs-with-react-transition-group-2af6c87cab0c */\n\n// initialize palette w/four colors, default white\nvar numCards = 4;\nvar colors = {};\nfor (let i = 0; i < numCards; i++) {\n    colors[i] = \"#ffffff\";\n}\n\nclass ColorStation extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            colors: colors, // contains base palette\n            showPalette: false // for CSSTransition (controls palette animation)\n        };\n\n        this.updatePalette = this.updatePalette.bind(this);\n        this.addCard = this.addCard.bind(this);\n        this.removeCard = this.removeCard.bind(this);\n    }\n\n    // add a ColorCard and update colors dict\n    addCard() {\n        colors[numCards] = \"#ffffff\";\n        numCards++;\n        this.setState({\n            colors: colors\n        });\n    }\n\n    // remove a ColorCard and update colors dict\n    removeCard() {\n        delete colors[numCards - 1]; // removes ColorCard at end\n        numCards--;\n        this.setState({\n            colors: colors\n        });\n    }\n\n    /**\n    * @desc updates base palette with new color and ColorCar id\n    * @param id (int): id of ColorCard containing specific color\n    * @param hex (string): hex value of new color\n    */\n    updatePalette(id, hex) {\n        colors[id] = hex;\n        this.setState({\n            colors: colors\n        });\n        this.props.setPalette(colors);\n    }\n\n    // activates palette animation\n    toggleDisplay = () => {\n        this.setState({\n            showPalette: true\n        });\n    };\n\n    render() {\n        var cards = [];\n        var swatches = [];\n        // create ColorCards and corresponding swatches\n        for (let i = 0; i < numCards; i++) {\n            cards.push(<ColorCard key = {i} id = {i} updatePalette = {this.updatePalette}/>)\n            swatches.push(<Swatch key = {i} color = {this.state.colors[i]}/>)\n        }\n\n        return (\n            <div>\n                <div>\n                    <h2>choose your base palette</h2>\n                    <p className=\"prompt\">use the color pickers below to select base colors for your project. (click +/- to change number of colors in the palette.)</p>\n                    {/* animating palette entrance */}\n                    <CSSTransition\n                        classNames = \"palette\"\n                        in = {this.state.showPalette}\n                        unmountOnExit\n                        appear = {true}\n                        timeout = {0}\n                    >\n                        <div className=\"palette\">{swatches}</div>\n                    </CSSTransition>\n                </div>\n                {/* UI \"station\" containing ColorCards and +/- controls */}\n                <div className=\"color-station\" onClick = {this.toggleDisplay}>\n                    {cards}\n                    <div className = \"icon-panel-lg\">\n                        <button onClick = {this.addCard}><PlusCircle className=\"icon\" color=\"black\"/></button>\n                        <button onClick = {this.removeCard}><DashCircle className=\"icon\" color=\"black\"/></button>\n                    </div>\n                </div>\n                <Button className=\"button\" variant=\"outline-secondary\" as={Link} to=\"/palette\">generate colors</Button>\n            </div>\n        );\n    }\n\n    // <CSSTransition\n    //     classNames = \"ani\"\n    //     in = {this.state.showPalette}\n    //     timeout = {1000}\n    //     unmountOnExit\n    // >\n    //     <div className=\"palette\">{swatches}</div>\n    // </CSSTransition>\n    // <div className=\"palette\">{swatches}</div>\n    // <CSSTransition\n    //     classNames = \"prompt\"\n    //     in = {this.state.showPrompt}\n    //     timeout = {1000}\n    //     unmountOnExit\n    //     appear = {true}\n    // >\n    //     <p className=\"prompt\">use color pickers to select base colors for your project.</p>\n    // </CSSTransition>\n}\n\nexport default ColorStation;\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport { ChromePicker } from 'react-color';\n\nclass ColorCard extends React.Component {\n    constructor(props) {\n        super(props);\n        // set background to white\n        this.state = {\n            background: '#fff'\n        };\n        this.id = this.props.id;\n    }\n\n    // set background to new color\n    handleChange = (color) => {\n        this.setState({\n            background: color.hex\n        });\n    };\n\n    // update palette in ColorStation\n    handleChangeComplete = (color) => {\n        this.props.updatePalette(this.id, color.hex);\n    }\n\n    render() {\n        return (\n            // <Card>\n            //     <Card.Header className=\"square-swatch\">\n            //         <div style={{backgroundColor: this.state.background, width: '100%', height: 100}}></div>\n            //     </Card.Header>\n            //     <Card.Body>\n            //         <ChromePicker\n            //             color = {this.state.background}\n            //             onChange = {this.handleChange}\n            //             onChangeComplete = {this.handleChangeComplete}\n            //         />\n            //     </Card.Body>\n            // </Card>\n            <ChromePicker\n                color = {this.state.background}\n                onChange = {this.handleChange}\n                onChangeComplete = {this.handleChangeComplete}\n                disableAlpha = {true}\n            />\n        );\n    }\n}\n\nexport default ColorCard;\n","import React from 'react';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\n\nclass Swatch extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        // console.log(this.state.color);\n        return (\n            <OverlayTrigger\n                placement=\"bottom\"\n                trigger = {[\"hover\", \"focus\"]}\n                overlay={<Tooltip id=\"button-tooltip-2\">{this.props.color}</Tooltip>}\n            >\n                {/* displays hex code on hover/focus */}\n                <div className=\"circle-swatch\"\n                    style={{backgroundColor: this.props.color}}>\n                </div>\n            </OverlayTrigger>\n        );\n    }\n}\n\nexport default Swatch;\n","import React from 'react';\nimport Swatch from './Swatch';\nimport Form from 'react-bootstrap/Form';\nimport { Plus, Dash, BrightnessHigh, BrightnessLow } from 'react-bootstrap-icons';\n\n// https://stackoverflow.com/questions/4467539/javascript-modulo-gives-a-negative-result-for-negative-numbers\nconst modCalc = (a, b) => ((a % b) + b) % b;\n\n// calculates true shadow hue given lighting hue\nconst shade = (light) => modCalc(light + 180, 360);\n\n/* converts hex to HSL\nhttps://css-tricks.com/converting-color-spaces-in-javascript/ */\nfunction hexToHSL(H) {\n    // Convert hex to RGB first\n    let r = 0, g = 0, b = 0;\n    if (H.length === 4) {\n        r = \"0x\" + H[1] + H[1];\n        g = \"0x\" + H[2] + H[2];\n        b = \"0x\" + H[3] + H[3];\n    } else if (H.length === 7) {\n        r = \"0x\" + H[1] + H[2];\n        g = \"0x\" + H[3] + H[4];\n        b = \"0x\" + H[5] + H[6];\n    }\n\n    // Then to HSL\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    let cmin = Math.min(r,g,b),\n        cmax = Math.max(r,g,b),\n        delta = cmax - cmin,\n        h = 0,\n        s = 0,\n        l = 0;\n\n    if (delta === 0)\n        h = 0;\n    else if (cmax === r)\n        h = ((g - b) / delta) % 6;\n    else if (cmax === g)\n        h = (b - r) / delta + 2;\n    else\n        h = (r - g) / delta + 4;\n\n    h = Math.round(h * 60);\n\n    if (h < 0)\n        h += 360;\n\n    l = (cmax + cmin) / 2;\n    s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n    s = +(s * 100).toFixed(1);\n    l = +(l * 100).toFixed(1);\n\n    var hsl = {\n        h: h,\n        s: s,\n        l: l\n    };\n\n    return hsl;\n}\n\n/* converts HSL to hex\nhttps://css-tricks.com/converting-color-spaces-in-javascript/ */\nfunction HSLToHex(h,s,l) {\n    s /= 100;\n    l /= 100;\n\n    let c = (1 - Math.abs(2 * l - 1)) * s,\n        x = c * (1 - Math.abs((h / 60) % 2 - 1)),\n        m = l - c/2,\n        r = 0,\n        g = 0,\n        b = 0;\n\n    if (0 <= h && h < 60) {\n        r = c; g = x; b = 0;\n    } else if (60 <= h && h < 120) {\n        r = x; g = c; b = 0;\n    } else if (120 <= h && h < 180) {\n        r = 0; g = c; b = x;\n    } else if (180 <= h && h < 240) {\n        r = 0; g = x; b = c;\n    } else if (240 <= h && h < 300) {\n        r = x; g = 0; b = c;\n    } else if (300 <= h && h < 360) {\n        r = c; g = 0; b = x;\n    }\n    // Having obtained RGB, convert channels to hex\n    r = Math.round((r + m) * 255).toString(16);\n    g = Math.round((g + m) * 255).toString(16);\n    b = Math.round((b + m) * 255).toString(16);\n\n    // Prepend 0s, if necessary\n    if (r.length === 1)\n        r = \"0\" + r;\n    if (g.length === 1)\n        g = \"0\" + g;\n    if (b.length === 1)\n        b = \"0\" + b;\n\n    return \"#\" + r + g + b;\n}\n\n/**\n* @desc calculates one new shade (either shadow or highlight) for base color\n* @param hsl (dict): HSL values for base shade\n* @param lighting (int): hue value for the lighting color\n* @param magnitude (int): number of shades away from base (negative for highlights, positive for shades)\n* magnitude of 1 = one shade away from base color; -2 = two highlights away from base color, etc.\n* @return (string) hex value of computed shade\n*/\nfunction computeShade(hsl, lighting, magnitude) {\n    // console.log(hsl);\n    let newHSL = {};\n    let hue = hsl[\"h\"],\n        saturation = hsl[\"s\"],\n        value = hsl[\"l\"];\n\n    // position of hue relative to lighting shade\n    let huePosition = modCalc(hue - lighting, 360);\n    // distance between hue and true shadow hue\n    let shadeDiff = modCalc(hue - shade(lighting), 360);\n\n    // depending on huePosition, move in direction closer to true shadow (for shades) or farther (for highlights)\n    if (huePosition > 180) {\n        newHSL[\"h\"] = modCalc(shade(lighting) + ((0.92 ** magnitude) * shadeDiff), 360);\n    } else if (huePosition < 180 && huePosition > 0) {\n        newHSL[\"h\"] = modCalc(shade(lighting) - ((0.92 ** magnitude) * shadeDiff), 360);\n    } else {\n        newHSL[\"h\"] = hue;\n    }\n\n    // if calculating shadows (not highlights), use 100 as target value for saturation and 0 as target for value\n    if (magnitude >= 0) {\n        let satDiff = 100 - saturation;\n        let valDiff = value;\n        newHSL[\"s\"] = 100 - ((0.85 ** magnitude) * satDiff);\n        newHSL[\"l\"] = (0.72 ** magnitude) * valDiff;\n    } else { // for calculating highlights, use 0 as target value for saturation and 100 as target for value\n        let satDiff = saturation;\n        let valDiff = 100 - value;\n        newHSL[\"s\"] = (0.75 ** (-1 * magnitude)) * satDiff;\n        newHSL[\"l\"] = 100 - ((0.80 ** (-1 * magnitude)) * valDiff);\n    }\n\n    // console.log(newHSL);\n    return HSLToHex(newHSL[\"h\"], newHSL[\"s\"], newHSL[\"l\"]);\n}\n\n/**\n* @desc generate complete spectrum of shades for base color\n* @param hex (string): hex code for base color\n* @param lighting (int): hue value for the lighting color\n* @param numShades (int): number of shades to generate\n* @return (list) generated shades\n*/\nfunction generateShades(hex, lighting, numShades) {\n    // convert to HSL\n    let hsl = hexToHSL(hex);\n    var shades = [];\n\n    // generate numShades shades, with equal amount of highlights and shadows\n    for (let i = 0; i < numShades; i++) {\n        shades.push(computeShade(hsl, lighting, i - (Math.floor(numShades / 2))));\n    }\n\n    return shades;\n}\n\n/**\n* @desc change intensity of a color\n* @param hsl (dict): HSL values for color\n* @param factor (int): 1 to increase intensity, -1 to decrease intensity\n* @return (string) hex value of new color\n*/\nfunction intensifyColor(hsl, factor) {\n    let newHSL = {};\n    let hue = hsl[\"h\"],\n        saturation = hsl[\"s\"],\n        value = hsl[\"l\"];\n\n    newHSL[\"h\"] = hue;\n    newHSL[\"s\"] = saturation + (10 * factor);\n    newHSL[\"l\"] = value + (5 * factor);\n\n    if (newHSL[\"s\"] > 100) {\n        newHSL[\"s\"] = 100;\n    } else if (newHSL[\"s\"] < 0) {\n        newHSL[\"s\"] = 0;\n    }\n\n    if (newHSL[\"l\"] > 100) {\n        newHSL[\"l\"] = 100;\n    } else if (newHSL[\"l\"] < 0) {\n        newHSL[\"l\"] = 0;\n    }\n\n    return HSLToHex(newHSL[\"h\"], newHSL[\"s\"], newHSL[\"l\"]);\n}\n\n/**\n* @desc change intensity of entire palette\n* @param palette (dict)\n* @param factor (int): 1 to increase intensity, -1 to decrease intensity\n* @return (dict) new palette with changed intensity\n*/\nfunction intensifyPalette(palette, factor) {\n    let newPalette = {};\n\n    for (var key in palette) {\n        let hsl = hexToHSL(palette[key]);\n        // change intensity of individual color in palette and add to new palette\n        newPalette[key] = intensifyColor(hsl, factor);\n    }\n\n    return newPalette;\n}\n\nclass FullPalette extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            lighting: 60,\n            numShades: 9\n        };\n    }\n\n    // componentDidMount() {\n    //     console.log(this.props.base);\n    // }\n\n    // update new lighting values\n    updateLighting(value) {\n        this.setState({\n            lighting: value\n        });\n    }\n\n    // increase number of shades calculated (+1 highlight and shadow)\n    addShades = () => {\n        this.setState(prevState => ({\n            numShades: prevState.numShades + 2\n        }))\n    };\n\n    // decrease number of shades calculated (-1 highlight and shadow)\n    removeShades = () => {\n        this.setState(prevState => ({\n            numShades: prevState.numShades - 2\n        }))\n    };\n\n    // intensify base palette (will change entire generated palette)\n    intensify = () => {\n        this.props.setPalette(intensifyPalette(this.props.base, 1));\n    }\n\n    // deintensify pase palette\n    deintensify = () => {\n        this.props.setPalette(intensifyPalette(this.props.base, -1));\n    }\n\n    // allows lighting slider to change lighting value\n    handleChange = e => {\n        this.setState({\n            lighting: e.target.value\n        });\n    };\n\n    render() {\n        var collection = [];\n\n        for (var key in this.props.base) {\n            // generate shades from base palette passed through props\n            var shades = generateShades(this.props.base[key], this.state.lighting, this.state.numShades);\n            var swatches = [];\n            // console.log(shades);\n\n            // create swatches for single base color\n            for (let i = 0; i < shades.length; i++) {\n                swatches.push(<Swatch key = {i + (key * this.state.numShades)} color = {shades[i]}/>);\n            }\n\n            // push swatches to whole palette\n            collection.push(<div className = \"swatch-col\">{swatches}</div>);\n        }\n\n        return (\n            <div id = \"palette-station\">\n                {/* left side panel */}\n                <div className = \"control-panel textbox-r\">\n                    <div>\n                        <p><i>welcome to intuitive colors.</i></p>\n                        <p>using a user-inputted base palette, intuitive colors generates a set of compatible shades and highlights by manipulating hsl values according to an algorithm.</p>\n                        <p>want to use a specific color value in your project? hover over the swatch (or tap on touch screen) to see the hex code. to expand or shrink the palette, use the plus/minus controls (right).</p>\n                    </div>\n                    {/* slider to adjust lighting */}\n                    <Form>\n                        <Form.Group controlId=\"formBasicRangeCustom\">\n                            <Form.Control type=\"range\" custom\n                                className = \"lighting-slider\"\n                                min = \"60\" max = \"420\"\n                                value = {this.state.lighting}\n                                onChange = {this.handleChange}\n                                step = \"1\"\n                            />\n                        </Form.Group>\n                    </Form>\n                </div>\n                {/* swatches for generated palette */}\n                <div className = \"swatch-collection\">\n                    {collection}\n                </div>\n                {/* right side panel */}\n                <div className = \"control-panel textbox-l\">\n                    {/* user controls */}\n                    <div className = \"icon-panel\">\n                        <button onClick = {this.addShades}><Plus className=\"icon\" color=\"black\"/></button>\n                        <button onClick = {this.removeShades}><Dash className=\"icon\" color=\"black\"/></button>\n                        <button onClick = {this.intensify}><BrightnessHigh className=\"icon\" color=\"black\"/></button>\n                        <button onClick = {this.deintensify}><BrightnessLow className=\"icon\" color=\"black\"/></button>\n                    </div>\n                    <div>\n                        <p>by default, intuitive colors generates colors based on a yellow lighting hue emulating that of natural light. for projects requiring more unique lighting or duller/more vibrant palettes, using the lighting slider (located on the left panel) and vibrancy controls (right panel) will update the swatches to reflect your preferences.</p>\n                        <p>it is recommended to use the default lighting settings for projects involving standard shading and highlighting.</p>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default FullPalette;\n","import './App.css';\nimport React from 'react';\nimport ColorStation from './ColorStation';\nimport FullPalette from './FullPalette';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport {\n    HashRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        /* using localStorage to save palette so it doesn't get reset between route views\n        https://www.joshwcomeau.com/react/persisting-react-state-in-localstorage/\n        https://stackoverflow.com/questions/28314368/how-to-maintain-state-after-a-page-refresh-in-react-js */\n        this.prevPalette = JSON.parse(localStorage.getItem(\"palette\"));\n        // check if previous palette state exists\n        if (this.prevPalette !== null) {\n            this.state = {\n                palette: this.prevPalette\n            };\n        } else {\n            this.state = {\n                palette: {}\n            };\n        }\n\n        this.setPalette = this.setPalette.bind(this);\n    }\n\n    // update palette with new palette values\n    setPalette(palette) {\n        this.setState({\n            palette: palette\n        }, () => {\n            localStorage.setItem(\"palette\", JSON.stringify(this.state.palette))\n        });\n        console.log(this.state.palette);\n    }\n\n    render() {\n        // console.log(this.state.palette);\n        return (\n            <div className=\"App\">\n                <div className=\"App-body\">\n                    <Router basename=\"/\">\n                        {/* navigation bar */}\n                        <Navbar className=\"Navbar\" bg=\"#fbfbf8\" fixed=\"top\">\n                            <Navbar.Brand as={Link} to=\"/\">intuitive colors</Navbar.Brand>\n                            <Nav className=\"mr-auto\">\n                                <Nav.Link as={Link} to=\"/\">home</Nav.Link>\n                                <Nav.Link href=\"https://github.com/qiuriosity/intuitive-colors\">documentation</Nav.Link>\n                            </Nav>\n                            <Navbar.Text>\n                                <a href=\"https://github.com/qiuriosity\">&#169; eq</a> on github 2020.\n                            </Navbar.Text>\n                        </Navbar>\n                        {/* routing for ColorStation/FullPalette */}\n                        <Switch>\n                            <Route path = \"/palette\">\n                                <FullPalette setPalette = {this.setPalette} base = {this.state.palette}/>\n                            </Route>\n                            <Route path = \"/\">\n                                <ColorStation setPalette = {this.setPalette}/>\n                            </Route>\n                        </Switch>\n                    </Router>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}